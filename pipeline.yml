trigger:
  branches:
    include:
      - main

variables:
  GitVersion.Version: '5.x.x'
  GitVersion.Config: 'gitversion.yml'
  NuGet.Version: '6.x.x'
  Build.Projects: '**/*.csproj'
  Build.Projects.Root: 'EtherGizmos.SqlMonitor'
  Build.Projects.Api: '$(Build.Projects.Root).Api'
  Build.Projects.Web: '$(Build.Projects.Root).Web'
  Build.Projects.Tests.Unit: '$(Build.Projects.Root).UnitTests'
  Build.Projects.Tests.MySql: '$(Build.Projects.Root).IntegrationTests.MySql'
  Build.Projects.Tests.PostgreSql: '$(Build.Projects.Root).IntegrationTests.PostgreSql'
  Build.Projects.Tests.SqlServer: '$(Build.Projects.Root).IntegrationTests.SqlServer'
  Build.Projects.Tests.Ssh: '$(Build.Projects.Root).IntegrationTests.Ssh'
  Build.Projects.Tests.WinRm: '$(Build.Projects.Root).IntegrationTests.WinRm'

stages:
- stage: prepare
  displayName: 'Prepare'
  jobs:
  - job: prepare
    displayName: 'Pre-Build Tasks'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      fetchDepth: 0
      clean: true

    - task: gitversion/setup@0
      displayName: 'Install GitVersion'
      inputs:
        versionSpec: '$(GitVersion.Version)'

    - task: gitversion/execute@0
      displayName: 'Run GitVersion'
      inputs:
        useConfigFile: true
        configFilePath: '$(GitVersion.Config)'

- stage: test
  displayName: 'Test'
  dependsOn: prepare
  jobs:

  - job: test_linux
    displayName: 'Linux Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Perform Unit Tests'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Tests.Unit).csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: DockerCompose@0
      displayName: 'Create Docker Container (MySQL)'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/$(Build.Projects.Tests.MySql)/Initialization/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'

    - task: DotNetCoreCLI@2
      displayName: 'Perform Integration Tests (MySQL)'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Tests.MySql).csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: DockerCompose@0
      displayName: 'Create Docker Container (PostgreSQL)'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/$(Build.Projects.Tests.PostgreSql)/Initialization/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'

    - task: DotNetCoreCLI@2
      displayName: 'Perform Integration Tests (PostgreSQL)'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Tests.PostgreSql).csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: DockerCompose@0
      displayName: 'Create Docker Container (SQL Server)'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/$(Build.Projects.Tests.SqlServer)/Initialization/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'

    - task: DotNetCoreCLI@2
      displayName: 'Perform Integration Tests (SQL Server)'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Tests.SqlServer).csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: DockerCompose@0
      displayName: 'Create Docker Container (SSH)'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/$(Build.Projects.Tests.Ssh)/Initialization/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'

    - task: DotNetCoreCLI@2
      displayName: 'Perform Integration Tests (SSH)'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Tests.Ssh).csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: NuGetToolInstaller@1 
      displayName: 'Install NuGet' 
      inputs: 
        versionSpec: '$(NuGet.Version)' 

    - task: Npm@1 
      displayName: 'Install NPM Packages' 
      inputs: 
        command: 'ci' 
        workingDir: 'src/$(Build.Projects.Web)' 

    - task: Npm@1
      displayName: 'Perform Angular Tests'
      inputs:
        command: 'custom'
        workingDir: 'src/$(Build.Projects.Web)'
        customCommand: 'run test-headless'

    - task: PublishTestResults@2
      displayName: 'Publish Angular Tests'
      condition: succeededOrFailed() 
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
        searchFolder:
        mergeTestResults: true

    - task: reportgenerator@5
      displayName: 'Combine Code Coverage'
      inputs:
        reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Code Coverage Artifact'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/CoverageResults'
        ArtifactName: 'linux-tests'
        publishLocation: 'Container'

  - job: test_windows
    displayName: 'Windows Tests'
    pool:
      vmImage: 'windows-latest'
    steps:

    - task: PowerShell@2
      displayName: 'Enable Unencrypted Connections (WinRM)'
      inputs:
        targetType: 'inline'
        script: 'winrm set winrm/config/client ''@{AllowUnencrypted="true"}'''

    - task: DockerCompose@0
      displayName: 'Create Docker Container (WinRM)'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/$(Build.Projects.Tests.WinRm)/Initialization/docker-compose-2022.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'

    - task: DotNetCoreCLI@2
      displayName: 'Perform Integration Tests (WinRM)'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Tests.WinRm).csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: reportgenerator@5
      displayName: 'Combine Code Coverage'
      inputs:
        reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Code Coverage Artifact'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/CoverageResults'
        ArtifactName: 'windows-tests'
        publishLocation: 'Container'

  - job: merge_tests
    displayName: 'Combine Code Coverage'
    dependsOn:
      - test_linux
      - test_windows
    steps:

    - task: DownloadBuildArtifacts@1
      displayName: 'Download Linux Test Results'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'linux-tests'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: DownloadBuildArtifacts@1
      displayName: 'Download Windows Test Results'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'windows-tests'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: PowerShell@2
      displayName: 'Standardize Cobertura Paths'
      inputs:
        targetType: 'inline'
        script: |
          #Path to the Cobertura XML report generated on Windows
          $WindowsReportPath = "$(System.ArtifactsDirectory)/windows-tests/Cobertura.xml"
          
          #Path to save the standardized Cobertura XML report
          $StandardizedReportPath = "$(System.ArtifactsDirectory)/windows-tests/Cobertura.xml"
          
          #Read the content of the Windows Cobertura XML report
          $ReportContent = Get-Content -Path $WindowsReportPath
          
          #Replace Windows worker file paths with Linux worker paths
          $StandardizedContent = $ReportContent -replace 'D:\\a\\', '/home/vsts/work/'  # Replace drive letter
          $StandardizedContent = $StandardizedContent -replace '\\', '/'  # Replace backslashes with forward slashes
          
          #Save the standardized content to a new file
          $StandardizedContent | Out-File -FilePath $StandardizedReportPath -Encoding utf8
          
          Write-Host "Standardized report saved to: $StandardizedReportPath"

    - task: reportgenerator@5
      displayName: 'Combine Code Coverage'
      inputs:
        reports: '$(System.ArtifactsDirectory)/**/Cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CoverageResults'
