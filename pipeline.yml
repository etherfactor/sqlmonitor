trigger:
  branches:
    include:
      - main

variables:
  GitVersion.Version: '5.x.x'
  GitVersion.Config: 'gitversion.yml'
  NuGet.Version: '6.x.x'
  Build.Projects: '**/*.csproj'
  Build.Projects.Api: 'EtherGizmos.SqlMonitor.Api'
  Build.Projects.Web: 'EtherGizmos.SqlMonitor.Web'

stages:
- stage: prepare
  displayName: 'Prepare'
  jobs:
  - job: prepare
    displayName: 'Pre-Build Tasks'
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self
      fetchDepth: 0
      clean: true

    - task: gitversion/setup@0
      displayName: 'Install GitVersion'
      inputs:
        versionSpec: '$(GitVersion.Version)'

    - task: gitversion/execute@0
      displayName: 'Run GitVersion'
      inputs:
        useConfigFile: true
        configFilePath: '$(GitVersion.Config)'

- stage: test
  displayName: 'Test'
  dependsOn: prepare
  jobs:

  - job: test_linux
    displayName: 'Linux Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:

    - task: DotNetCoreCLI@2
      displayName: 'Perform Unit Tests'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Api).UnitTests.csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'Build Test Project (SSH)'
      inputs:
        command: 'build'
        projects: '**/$(Build.Projects.Api).IntegrationTests.Ssh.csproj'

    - task: PowerShell@2
      displayName: 'Create SSH Key (SSH)'
      inputs:
        targetType: 'inline'
        script: 'ssh-keygen -t rsa -b 4096 -f id_rsa -N password'
        workingDirectory: '$(Build.SourcesDirectory)/$(Build.Projects.Api).IntegrationTests.Ssh/Initialization'

    - task: DockerCompose@0
      displayName: 'Create Docker Container (SSH)'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerComposeFile: '**/$(Build.Projects.Api).IntegrationTests.Ssh/bin/**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up -d'

    - task: DotNetCoreCLI@2
      displayName: 'Perform Integration Tests (SSH)'
      inputs:
        command: 'test'
        projects: '**/$(Build.Projects.Api).IntegrationTests.Ssh.csproj'
        arguments: '--collect "XPlat Code Coverage"'

    - task: NuGetToolInstaller@1 
      displayName: 'Install NuGet' 
      inputs: 
        versionSpec: '$(NuGet.Version)' 

    - task: Npm@1 
      displayName: 'Install NPM Packages' 
      inputs: 
        command: 'ci' 
        workingDir: '$(Build.Projects.Web)' 

    - task: Npm@1
      displayName: 'Perform Angular Tests'
      inputs:
        command: 'custom'
        workingDir: '$(Build.Projects.Web)'
        customCommand: 'run test-headless'

    - task: PublishTestResults@2
      displayName: 'Publish Angular Tests'
      condition: succeededOrFailed() 
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
        searchFolder:
        mergeTestResults: true

    - task: reportgenerator@5
      displayName: 'Combine Code Coverage'
      inputs:
        reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/CoverageResults'
        ArtifactName: 'linux-tests'
        publishLocation: 'Container'

#  - job: test_windows
#    displayName: 'Windows Tests'
#    pool:
#      vmImage: 'windows-latest'
#    steps:
#
#    - task: PowerShell@2
#      displayName: 'Start MSSQLLocalDB'
#      inputs:
#        targetType: 'inline'
#        script: 'sqllocaldb start mssqllocaldb'
#
#    - task: DotNetCoreCLI@2
#      displayName: 'Perform Integration Tests (HTTP)'
#      inputs:
#        command: 'test'
#        projects: '**/$(Build.Projects.Api).IntegrationTests.Http.csproj'
#        arguments: '--collect "XPlat Code Coverage"'
#
#    - task: DotNetCoreCLI@2
#      displayName: 'Build Test Project (WinRM)'
#      inputs:
#        command: 'build'
#        projects: '**/$(Build.Projects.Api).IntegrationTests.WinRm.csproj'
#
#    - task: PowerShell@2
#      displayName: 'Enable Unencrypted Connections (WinRM)'
#      inputs:
#        targetType: 'inline'
#        script: 'winrm set winrm/config/client ''@{AllowUnencrypted="true"}'''
#
#    - task: DockerCompose@0
#      displayName: 'Create Docker Container (WinRM)'
#      inputs:
#        containerregistrytype: 'Container Registry'
#        dockerComposeFile: '**/$(Build.Projects.Api).IntegrationTests.WinRm/bin/**/docker-compose-2022.yml'
#        action: 'Run a Docker Compose command'
#        dockerComposeCommand: 'up -d'
#
#    - task: DotNetCoreCLI@2
#      displayName: 'Perform Integration Tests (WinRM)'
#      inputs:
#        command: 'test'
#        projects: '**/$(Build.Projects.Api).IntegrationTests.WinRm.csproj'
#        arguments: '--collect "XPlat Code Coverage"'
#
#    - task: reportgenerator@5
#      displayName: 'Combine Code Coverage'
#      inputs:
#        reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
#        targetdir: '$(Build.SourcesDirectory)/CoverageResults'
#
#    - task: PublishBuildArtifacts@1
#      inputs:
#        PathtoPublish: '$(Build.SourcesDirectory)/CoverageResults'
#        ArtifactName: 'windows-tests'
#        publishLocation: 'Container'

- stage: build
  displayName: 'Build'
  dependsOn: test
  jobs:

  - job: build
    displayName: 'Build'
    pool:
      vmImage: 'windows-latest'
    steps:

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'linux-tests'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: DownloadBuildArtifacts@1
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'windows-tests'
        downloadPath: '$(System.ArtifactsDirectory)'

    - task: reportgenerator@5
      displayName: 'Combine Code Coverage'
      inputs:
        reports: '$(System.ArtifactsDirectory)/**/coverage.cobertura.xml'
        targetdir: '$(Build.SourcesDirectory)/CoverageResults'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'
        reportDirectory: '$(Build.SourcesDirectory)/CoverageResults'
