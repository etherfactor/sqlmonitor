trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  GitVersion.Version: '5.x.x'
  GitVersion.Config: 'gitversion.yml'
  NuGet.Version: '6.x.x'
  Build.Projects: '**/*.csproj'
  Build.Projects.Api: 'EtherGizmos.SqlMonitor.Api'
  Build.Projects.Web: 'EtherGizmos.SqlMonitor.Web'

jobs:
- job: prepare
  displayName: 'Pre-Build Tasks'
  steps:
  - checkout: self
    fetchDepth: 0
    clean: true

  - task: gitversion/setup@0
    displayName: 'Install GitVersion'
    inputs:
      versionSpec: '$(GitVersion.Version)'

  - task: gitversion/execute@0
    displayName: 'Run GitVersion'
    inputs:
      useConfigFile: true
      configFilePath: '$(GitVersion.Config)'

- job: build
  dependsOn: prepare
  displayName: 'Build Tasks'
  variables:
    CheckDependencies: $[ convertToJson( dependencies ) ]
  steps:

  - task: PowerShell@2
    displayName: 'Debug Dependencies'
    inputs:
      targetType: 'inline'
      script: 'Write-Host $env:CHECK_DEPENDENCIES'
    env:
      CHECK_DEPENDENCIES: $(CheckDependencies)

  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet'
    inputs:
      versionSpec: '$(NuGet.Version)'

  - task: Npm@1
    displayName: 'Install NPM Packages'
    inputs:
      command: 'ci'
      workingDir: '$(Build.Projects.Web)'

  - task: DotNetCoreCLI@2
    displayName: 'Restore Projects'
    inputs:
      command: 'restore'
      projects: '$(Build.Projects)'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    displayName: 'Build Projects'
    inputs:
      command: 'build'
      projects: '$(Build.Projects)'

  - task: PowerShell@2
    displayName: 'Start MSSQLLocalDB'
    inputs:
      targetType: 'inline'
      script: 'sqllocaldb start mssqllocaldb'

  - task: DotNetCoreCLI@2
    displayName: 'Perform Unit Tests'
    inputs:
      command: 'test'
      projects: '**/$(Build.Projects.Api).UnitTests.csproj'
      arguments: '--collect "XPlat Code Coverage"'

  - task: DotNetCoreCLI@2
    displayName: 'Perform Integration Tests (HTTP)'
    inputs:
      command: 'test'
      projects: '**/$(Build.Projects.Api).IntegrationTests.Http.csproj'
      arguments: '--collect "XPlat Code Coverage"'

  - task: PowerShell@2
    displayName: 'Switch to Linux Docker'
    inputs:
      targetType: 'inline'
      script: '& $Env:ProgramFiles\Docker\Docker\DockerCli.exe -SwitchLinuxEngine'

  - task: DockerCompose@0
    displayName: 'Create Docker Container (SSH)'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: '**/$(Build.Projects.Api).IntegrationTests.Ssh/bin/**/docker-compose.yml'
      action: 'Run a Docker Compose command'
      dockerComposeCommand: 'up -d'

  - task: DotNetCoreCLI@2
    displayName: 'Perform Integration Tests (SSH)'
    inputs:
      command: 'test'
      projects: '**/$(Build.Projects.Api).IntegrationTests.Ssh.csproj'
      arguments: '--collect "XPlat Code Coverage"'

  - task: PowerShell@2
    displayName: 'Switch to Windows Docker'
    inputs:
      targetType: 'inline'
      script: '& $Env:ProgramFiles\Docker\Docker\DockerCli.exe -SwitchWindowsEngine'

  - task: DockerCompose@0
    displayName: 'Create Docker Container (WinRM)'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerComposeFile: '**/$(Build.Projects.Api).IntegrationTests.WinRm/bin/**/docker-compose.yml'
      action: 'Run a Docker Compose command'
      dockerComposeCommand: 'up -d'

  - task: DotNetCoreCLI@2
    displayName: 'Perform Integration Tests (WinRM)'
    inputs:
      command: 'test'
      projects: '**/$(Build.Projects.Api).IntegrationTests.WinRm.csproj'
      arguments: '--collect "XPlat Code Coverage"'

  - task: Npm@1
    displayName: 'Perform Angular Tests'
    inputs:
      command: 'custom'
      workingDir: '$(Build.Projects.Web)'
      customCommand: 'run test-headless'

  - task: PublishTestResults@2
    displayName: 'Publish Angular Tests'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/TESTS-*.xml'
      searchFolder: 
      mergeTestResults: true

  - task: reportgenerator@5
    displayName: 'Combine Code Coverage'
    inputs:
      reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      targetdir: '$(Build.SourcesDirectory)/CoverageResults'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/CoverageResults/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CoverageResults'
